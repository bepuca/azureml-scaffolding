#!/usr/bin/env bash
#? Checks shell scripts for potential issues
set -eo pipefail
cd "$(dirname "$0")/../.."

function usage {
    cat<<EOF
Usage:
    $0
    $0 ls-tracked
    $0 check [FILE...]
    $0 help

Commands:
  check       Run "shellcheck" on the provided files.
  ls-tracked  List Git-tracked (Bash) shell scripts.
  help        Show this help message and exit.

When no command is provided, all tracked bash scripts are checked.
For more information on how checking is done, see ShellCheck documentation at:

    https://www.shellcheck.net/

Example:

    The following invocation will check all tracked shell scripts:

    $0 check \$($0 ls-tracked)
EOF
}

function check_all {
    mapfile -t < <("$0" ls-tracked) # Read into an array
    "$0" check "${MAPFILE[@]}"
}

case "$1" in
    "")
        check_all
        exit
        ;;
    ls-tracked)
        git ls-files --format="%(objectmode):%(path)" |
            grep -E '^100755:' | # Only executable files
            while IFS=: read -r mode path; do
                : "$mode" # Unused
                # Emit path if a shebang (#!) is found on the first line followed by
                # "bash":
                if head -1 "$path" | grep -q -E '^#!.+\bbash\b'; then
                    echo "$path"
                fi
            done
        ;;
    check)
        shift
        if [ $# -eq 0 ]; then
            check_all
        else
            shellcheck -x -s bash "$@"
        fi
        ;;
    help)
        usage
        ;;
    *)
        echo >&2 "Unknown command: $1"
        usage >&2
        exit 1
        ;;
esac
