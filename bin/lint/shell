#!/usr/bin/env bash
#? [Linting] Checks shell scripts for potential issues
set -eo pipefail
cd "$(dirname "$0")/../.."

function usage {
    cat<<EOF
Usage:
    $0
    $0 ls-tracked
    $0 check [FILE...]
    $0 help

Commands:
  check       Run "shellcheck" on the provided files.
  ls-tracked  List Git-tracked (Bash) shell scripts.
  help        Show this help message and exit.

When no command is provided, all tracked bash scripts are checked.
For more information on how checking is done, see ShellCheck documentation at:

    https://www.shellcheck.net/

Example:

    The following invocation will check all tracked shell scripts:

    $0 check \$($0 ls-tracked)
EOF
}

function check_all {
    mapfile -t < <("$0" ls-tracked) # Read into an array
    # If the array is empty, print a message and exit
    if [ ${#MAPFILE[@]} -eq 0 ]; then
        echo >&2 'No executable and tracked shell scripts found.'
        exit
    fi
    "$0" check "${MAPFILE[@]}"
}

function check_git {
    if ! git ls-files '?' --format=test 1>/dev/null 2>&1; then
        if ! git rev-parse --is-inside-work-tree &>/dev/null; then
            echo >&2 'Not in a Git repository.'
        else
            echo >&2 'You need a version of Git whose "ls-files" sub-command supports the "--format" option.'
        fi
        exit 1
    fi
}

case "$1" in
    "")
        check_git
        check_all
        exit
        ;;
    ls-tracked)
        check_git
        git ls-files --format="%(objectmode):%(path)" |
            grep -E '^100755:' | # Only executable files
            while IFS=: read -r mode path; do
                : "$mode" # Unused
                # Emit path if a shebang (#!) is found on the first line followed by
                # "bash":
                if head -1 "$path" | grep -q -E '^#!.+\bbash\b'; then
                    echo "$path"
                fi
            done
        ;;
    check)
        shift
        if [ $# -eq 0 ]; then
            check_all
        else
            shellcheck -x -s bash "$@"
        fi
        ;;
    help)
        usage
        ;;
    *)
        echo >&2 "Unknown command: $1"
        usage >&2
        exit 1
        ;;
esac
