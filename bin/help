#!/usr/bin/env python
#? Show this help

import os
from builtins import print as print_
from collections import OrderedDict
from enum import Enum
from pathlib import Path
from typing import Final

DESCRIPTION_PREFIX: Final = "#?"


class Color(Enum):
    BLUE = "\033[94m"
    DEFAULT = "\033[0m"


def main() -> None:
    """
    Print the description of all the commands in the bin directory.

    Commands are grouped by the directory they are in.

    The description of a command is the first line of the file that starts with
    the DESCRIPTION_PREFIX. The DESCRIPTION_PREFIX is removed from the
    description.
    """
    current_dir = Path(__file__).parent

    commands: dict[Path, dict[str, str]] = OrderedDict()

    for dir, file_name in [
        (Path(dir), file) for dir, _, filenames in os.walk(current_dir) for file in filenames
    ]:
        file = dir / file_name

        if not os.access(file, os.X_OK):
            # Skip if the file is not executable
            continue

        with open(file) as file:
            lines = file.readlines()

        lines = [
            line.replace(DESCRIPTION_PREFIX, "").strip()
            for line in lines
            if line.startswith(DESCRIPTION_PREFIX)
        ]

        if dir not in commands:
            commands[dir] = {}

        commands[dir][file_name] = lines[0] if lines else ""

    def print(message: str, color: Color = Color.DEFAULT) -> None:
        print_(color.value + message)

    def relative_path(path: Path) -> str:
        return str(path.relative_to(os.getcwd()))

    max_file_name_length = max(
        len(relative_path(dir / name))
        for dir, command in commands.items()
        for name, _ in command.items()
    )

    print("")
    for dir, files in commands.items():
        print(f"# {'GENERAL' if dir.name == 'bin' else dir.name.upper()}", color=Color.BLUE)

        for file, help in files.items():
            file_path = str(relative_path(dir / file))
            print(f"{file_path.ljust(max_file_name_length + 2)} {help}")

        print("")


if __name__ == "__main__":
    main()
