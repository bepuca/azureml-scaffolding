#!/usr/bin/env bash
#? [Pipeline] Execute pipeline locally as it would in AzureML

set -eo pipefail
cd "$(dirname "$0")/../.."

usage() {
    cat<<EOF
Execute pipeline locally as it would in AzureML

Usage: $0 PIPELINE

Options:
    -h, --help  Show this help message and exit.

Arguments:
  PIPELINE  Name of pipeline YAML (without extension) in "\$PIPES_PATH".

This script ensures the pipeline is isolated with the minimum files and
is executed locally as it would be in AzureML, one step at a time. Packages
are executed in the order used in the pipeline YAML file.

Each step is expected to be named after the package it uses (but dashes are
replaced by underscores).

Each step is a package and is expected to be named after it (but dashes replaced
by underscores). The execution is driven by each package entrypoint
'__main__.py'. It is the responsibility of the user to define the entrypoints so
they can be chained without command line arguments.
EOF
}

while :; do
    case $1 in
        -h|--help) usage; exit ;;
        *) break ;;
    esac
    shift
done

. bin/lib/utils.sh
if [ $# -eq 0 ]; then utils::invalid_usage "Pipeline not provided."; fi
pipeline=$1

. bin/lib/run.sh
read -r _ run_dir <<< "$(run::prepare "$pipeline")"
packages="$(bin/pipe/_iso "$pipeline" "$run_dir")"

while read -r package; do
    pushd "$run_dir/$package/src" > /dev/null
    run::local "$package"
    popd > /dev/null
done <<< "$packages"
