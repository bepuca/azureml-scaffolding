#!/usr/bin/env bash
#? Package artifacts for an experiment run in a separate directory

set -eo pipefail
cd "$(dirname "$0")/../.."

function usage {
    cat<<EOF
Package artifacts for an experiment run in a separate directory

Usage: $0 EXPERIMENT RUN_NAME

Options:
    -h, --help            Show this help message and exit

Arguments:
  EXPERIMENT  Directory of the experiment relative to "$CODE_PATH"
  RUN_NAME    Name of the run

The goal is to package the absolute minimum to run an experiment. This aims to
make the experiment reproducible and portable as well as easy to reason about in
the future.

The run directory will be created in "$RUNS_PATH/EXPERIMENT/RUN_NAME".
The run directory will contain all files inside EXPERIMENT and will
add the shared code and the environment files. Thus, the final structure:
  <run_name>
  ├── .amlignore
  ├── azure-ml-job.yaml
  ├── shared/
  ├── environment/
  │   ├── Dockerfile
  │   └── requirements.txt
  └── <experiment>
      ├── tests/
      ├── main.py
      └── ...

The requirements.txt will contain only the dependencies specified for the
experiment.
EOF
}

while :; do
    case $1 in
        -h|--help) usage; exit ;;
        *) break ;;
    esac
    shift
done

if [ $# -ne 2 ]; then
    echo>&2 "Both EXPERIMENT and RUN_NAME required."
    usage>&2
    exit 1
fi

source bin/env container.env
bin/chkenv "CODE_PATH" "RUNS_PATH"

experiment=$1
run_name=$2
if [[ ! -d "$CODE_PATH/$experiment" ]]; then
    echo>&2 "Experiment directory '$CODE_PATH/$experiment' does not exist."
    exit 1
fi

# create run directory
run_dir="$RUNS_PATH/$experiment/$run_name"
mkdir -p "$run_dir"

# copy experiment code and common code to run directory
cp -r "$CODE_PATH/$experiment/src/." "$run_dir"
cp -r "$CODE_PATH/shared/src/shared" "$run_dir"

# copy artifacts to build environment
docker_context="$run_dir/environment"
mkdir -p "$docker_context"
uv export --quiet \
    --output-file "$docker_context/requirements.txt" \
    --package $experiment \
    --no-hashes \
    --no-emit-workspace

# run directory to stdout so it can be used by other scripts
echo "$run_dir"