#!/usr/bin/env bash
#? Run an experiment locally as it would in AzureML

set -eo pipefail
cd "$(dirname "$0")/../.."

function usage {
    cat<<EOF
Run an experiment in local as packaged in AzureML

Usage: $0 [--script SCRIPT] EXPERIMENT

Options:
    -h, --help         Show this help message and exit.
    --script           Script to run in the experiment (w/o extension).
                       Default: "debug"

Arguments:
  EXPERIMENT  Directory of the experiment relative to "$CODE_PATH"

This script ensures the experiment is isolated with the minimum artifacts and
is executed locally as it would be in AzureML. It is the responsibility of the
user to define SCRIPT so it does not require command line arguments but
executes an equivalent payload of what is expected in AzureML.
EOF
}

script="debug"
while :; do
    case $1 in
        -h|--help) usage; exit ;;
        --script)
            if [[ -z "$2" ]]; then
                echo>&2 "Missing value for --script."
                usage>&2
                exit 1
            fi
            script=$2
            shift
            ;;
        *) break ;;
    esac
    shift
done

if [ $# -eq 0 ]; then
    echo>&2 "Experiment not provided."
    usage
    exit 1
fi
experiment=$1

run_name=$(bin/exp/name)
# add timestamp locally so runs are sorted chronologically
local_run_name="$(date +%s)_$run_name"
run_dir=$(bin/exp/isolate "$experiment" "$local_run_name")

pushd "$run_dir" > /dev/null
if [[ ! -f "$script.py" ]]; then
    echo>&2 "Script '$script.py' not found in the experiment directory. Have you created it?"
    popd > /dev/null
    exit 1
fi
uv run \
    --with-requirements environment/requirements.txt \
    --isolated \
    -m "$script"
popd > /dev/null

