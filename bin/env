#!/usr/bin/env bash
#? [Environment] Exports variables from an environment file

default_env="container.env"
if [[ "$1" == '-h' || "$1" == '--help' ]]; then

  cat<<EOF
Exports variables from an environment file.

Usage:
  source ${BASH_SOURCE[0]} [-h|--help]
  source ${BASH_SOURCE[0]} [FILE]

Arguments:

  FILE  Path to the file containing the variables to export.
        Default is: "$(dirname "${BASH_SOURCE[0]}")/../container.env"

An environment file is essentially a Bash script that sets variables and all
of which will be automatically exported into the environment of the current
shell. For proper operation, it should only contain variable assignments,
comments and blank lines for formatting. While it is a Bash script, it is
not required to have executable permissions or a shebang line because it will
be sourced.
EOF

elif [ $# -eq 0 ]; then # no arg?

  # Re-invoke this script with the default environment file
  # shellcheck disable=SC1090
  . "${BASH_SOURCE[0]}" "$(dirname "${BASH_SOURCE[0]}")/../$default_env"

else

  if [ ! -f "$1" ]; then
    echo>&2 "File not found: $1"
    # If script was sourced then return, otherwise exit
    # shellcheck disable=SC2317
    return 1 2>/dev/null || exit 1
  fi

  if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    echo>&2 "Warning! Variables will not be defined or exported into your current shell unless
        this script is sourced as follows: source ${BASH_SOURCE[0]}"
  fi

  set -a # Automatically export all variables
  # shellcheck disable=SC1090
  source "$1"
  set +a # Stop exporting variables

fi
